From 42f3d7aa281b84fe3c553ca142ec794c52c136d1 Mon Sep 17 00:00:00 2001
From: olesgedz <olesgedz@rambler.ru>
Date: Tue, 21 May 2019 15:50:01 +0300
Subject: [PATCH 1/2] ok

---
 libft  | 2 +-
 libsdl | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/libft b/libft
index f6b20a1..2f4a8ff 160000
--- a/libft
+++ b/libft
@@ -1 +1 @@
-Subproject commit f6b20a12a07dcf8ae89d952a1d93a2275de20db7
+Subproject commit 2f4a8ffe850b866b2a9776c81bfc70db1c7d17a5
diff --git a/libsdl b/libsdl
index 7aa8015..165b28c 160000
--- a/libsdl
+++ b/libsdl
@@ -1 +1 @@
-Subproject commit 7aa80159a75926b2d84956d4a93eac488dee04e4
+Subproject commit 165b28cd26e01f430e7a88e8a3101eb4aead9324
-- 
2.14.3 (Apple Git-98)


From 2256ab5aaea50991b0bfb8f560b15ff36c4ba25f Mon Sep 17 00:00:00 2001
From: olesgedz <olesgedz@rambler.ru>
Date: Thu, 23 May 2019 18:53:24 +0300
Subject: [PATCH 2/2] spheres: working, check speed, anything else - doesnt

---
 includes/rtv1.h |   9 ++++
 srcs/main.c     | 131 ++++++++++++++++++++++++++++++++++++++++++--------------
 2 files changed, 108 insertions(+), 32 deletions(-)

diff --git a/includes/rtv1.h b/includes/rtv1.h
index fc726c8..e1f996a 100644
--- a/includes/rtv1.h
+++ b/includes/rtv1.h
@@ -48,11 +48,20 @@ typedef struct s_lights {
 	int number;
 } t_lights;
 
+// typedef s_object
+// {
+// 	t_p3d pos;
+// 	t_p3d v;
+// 	t_material material;
+// 	float radius;
+// } t_object;
+
 typedef struct s_sphere
 {
 	t_p3d center;
 	t_material material;
 	float radius;
+	t_p3d v;
 } t_sphere;
 
 
diff --git a/srcs/main.c b/srcs/main.c
index 3eb890c..20538d5 100644
--- a/srcs/main.c
+++ b/srcs/main.c
@@ -6,15 +6,15 @@
 /*   By: jblack-b <jblack-b@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/05/22 15:34:45 by sdurgan           #+#    #+#             */
-/*   Updated: 2019/05/22 16:46:08 by jblack-b         ###   ########.fr       */
+/*   Updated: 2019/05/23 18:47:05 by jblack-b         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "rtv1.h"
-
 /*
 * ! We can't use global variables 
 */
+# define DROUND(d)	ABS(d) < 0.00001 ? 0 : (d)
 t_game game;
 
 int ft_point_compare(t_list *list, void *target)
@@ -267,30 +267,101 @@ t_p3d	reflect(t_p3d I, t_p3d n)
 	temp = ft_p3d_scalar_multiply(n, 2.f * ft_p3d_dot_multiply(I, n));
 	return ft_p3d_substract(I, temp);
 }
+
+double		get_t(double a, double b, double d, float *t0)
+{
+	double	t1;
+	double	t2;
+
+	t1 = (-b - sqrt(d)) / (2 * a);
+	t2 = (-b + sqrt(d)) / (2 * a);
+	if ((t1 <= t2 && t1 >= 0) || (t1 >= 0 && t2 < 0))
+		return (*t0 = t1);
+	if ((t2 <= t1 && t2 >= 0) || (t2 >= 0 && t1 < 0))
+		return (*t0 = t2);
+	return (-1);
+}
+
+double		ray_intersect_sphere(t_sphere *sphere, t_p3d *orig, t_p3d *dir, float *t0)
+{
+	float	a;
+	float	b;
+	float	c;
+	float	d;
+
+	a = ft_p3d_dot_multiply(*dir, *dir);
+	b = 2 * ft_p3d_dot_multiply(*dir, ft_p3d_substract(*orig, sphere->center));
+	c = ft_p3d_dot_multiply(ft_p3d_substract(*orig, sphere->center),
+		ft_p3d_substract(*orig, sphere->center)) - sphere->radius * sphere->radius;
+	d = b * b - 4 * a * c;
+	return (d < 0 ? -1 : get_t(a, b, d, t0));
+}
+
+
+double		ray_intersect_cylinder(t_sphere *cylinder, t_p3d *orig, t_p3d *dir, float *t0)
+{
+	t_p3d	x;
+	double	a;
+	double	b;
+	double	c;
+	double	d;
+	
+	x = ft_p3d_substract(*orig, cylinder->center);
+	a = ft_p3d_dot_multiply(*dir, cylinder->v);
+	a = ft_p3d_dot_multiply(*dir, *dir) - a * a;
+	b = 2 * (ft_p3d_dot_multiply(*dir, x) - ft_p3d_dot_multiply(*dir, cylinder->v)
+		* ft_p3d_dot_multiply(x, cylinder->v));
+	c = ft_p3d_dot_multiply(x, cylinder->v);
+	c = ft_p3d_dot_multiply(x, x) - c * c - cylinder->radius * cylinder->radius;
+	d = b * b - 4 * a * c;
+	return (d = d < 0 ? -1 : get_t(a, b, d, t0));
+}
+
+
+
+double		ray_intersect_cone(t_sphere *cone, t_p3d *orig, t_p3d *dir, float *t0)
+{
+	t_p3d	x;
+	float	a;
+	float	b;
+	float	c;
+	float	d;
+
+	x = ft_p3d_substract(*orig, cone->center);
+	a = ft_p3d_dot_multiply(*dir, cone->v);
+	a = ft_p3d_dot_multiply(*dir, *dir) - (1 + cone->radius * cone->radius) * a * a;
+	b =  1* (ft_p3d_dot_multiply(*dir, x) - (1 + cone->radius * cone->radius)
+		* ft_p3d_dot_multiply(*dir, cone->v) * ft_p3d_dot_multiply(x, cone->v));
+	c = ft_p3d_dot_multiply(x, cone->v);
+	c = ft_p3d_dot_multiply(x, x) - (1 + cone->radius * cone->radius) * c * c;
+	d = b * b - 4 * a * c;
+	//d = DROUND(d);
+	return (d = d < 0 ? -1 : get_t(a, b, d, t0));
+}
 /*
 *	Fucntion: checks if a ray hits the sphere
 *	Parameters: stuff, sphere, ray
 *	Return: true or false
 */
-int ray_intersect(t_sphere *sphere, t_p3d *orig, t_p3d *dir, float *t0)
-{
-	t_p3d L = ft_p3d_substract(sphere->center, *orig);
-	// printf("%f %f %f, dir: %f %f %f\n", L.x, L.y, L.z, dir->x, dir->y, dir->z);
-	float tca = ft_p3d_dot_multiply(L, *dir);
-	//printf("tca %f\n", tca);
-	float d2 = ft_p3d_dot_multiply(L, L) - tca * tca;
-	//printf("d2 %f %f \n", d2, sphere->radius * sphere->radius);
-	if (d2 > sphere->radius * sphere->radius)
-		return FALSE;
-	float thc = sqrtf(sphere->radius * sphere->radius - d2);
-	*t0	= tca - thc;
-	float t1 = tca + thc;
-	if (*t0 < 0)
-		*t0 = t1;
-	if (*t0 < 0)
-		return FALSE;
-	return TRUE;
-}
+// int ray_intersect(t_sphere *sphere, t_p3d *orig, t_p3d *dir, float *t0)
+// {
+// 	t_p3d L = ft_p3d_substract(sphere->center, *orig);
+// 	// printf("%f %f %f, dir: %f %f %f\n", L.x, L.y, L.z, dir->x, dir->y, dir->z);
+// 	float tca = ft_p3d_dot_multiply(L, *dir);
+// 	//printf("tca %f\n", tca);
+// 	float d2 = ft_p3d_dot_multiply(L, L) - tca * tca;
+// 	//printf("d2 %f %f \n", d2, sphere->radius * sphere->radius);
+// 	if (d2 > sphere->radius * sphere->radius)
+// 		return FALSE;
+// 	float thc = sqrtf(sphere->radius * sphere->radius - d2);
+// 	*t0	= tca - thc;
+// 	float t1 = tca + thc;
+// 	if (*t0 < 0)
+// 		*t0 = t1;
+// 	if (*t0 < 0)
+// 		return FALSE;
+// 	return TRUE;
+// }
 
 /*
 *	Fucntion: checks all objects on the scene
@@ -312,7 +383,7 @@ int scene_intersect(t_p3d *orig, t_p3d *dir, t_sphere *spheres, t_p3d *hit, t_p3
 		//printf("%d", ray_intersect(&spheres[i], orig, dir, dist_i));
 		// printf("%f, %f\n", dist_i, spheres_dist);
 		// ft_exit(NULL);
-		if (ray_intersect(&spheres[i], orig, dir, &dist_i) && dist_i < spheres_dist)
+		if (ray_intersect_cone(&spheres[i], orig, dir, &dist_i) && dist_i < spheres_dist)
 		{
 			spheres_dist = dist_i;
 			t_p3d temp = ft_p3d_scalar_multiply(*dir, dist_i);
@@ -368,10 +439,6 @@ t_p3d cast_ray(t_p3d *orig, t_p3d *dir, t_sphere *spheres)
 		t_p3d shadow_orig = ((ft_p3d_dot_multiply(light_dir, N) < 0) ? ft_p3d_substract(point, ft_p3d_scalar_multiply(N, 1e-3)) : ft_p3d_sum(point, ft_p3d_scalar_multiply(N, 1e-3)));
 		t_p3d shadow_pt, shadow_N;
 		t_material temp_material;
-		/* 
-		* Если раскомментить этот иф, то тени на доску правильные, а свет на сферах - нет 
-		* Если убрать - то на доску бросается свет, а не тень
-		*/
 		if (scene_intersect(&shadow_orig, &light_dir, spheres, &shadow_pt, &shadow_N, &temp_material) && ft_p3d_norm(ft_p3d_substract(shadow_pt, shadow_orig)) < light_distance)
 			continue ;
 		diffuse_light_intensity  += game.elum.lights[i].intensity * max(0, ft_p3d_dot_multiply(light_dir, N));
@@ -515,14 +582,14 @@ int	main(int argc, char **argv)
 	//vector_init(&game.elum.light);
 	//vector_add(&game.elum.light,  &(t_light){(t_p3d){7, 10, -16}, 1.5});
 	game.elum.number = 4; // number of light sources
-	game.n_spheres = 5;
+	game.n_spheres = 1;
 	game.spheres = ft_memalloc(sizeof(t_sphere) * 6);
-	game.spheres[0] = (t_sphere){(t_p3d){-3, 0, -16}, ivory, 2};
-	game.spheres[1] = (t_sphere){(t_p3d){-1.0, -1.5, -12}, red_rubber, 2};
-	game.spheres[3] = (t_sphere){(t_p3d){1.5, -0.5, -18}, red_rubber, 3};
-	game.spheres[4] = (t_sphere){(t_p3d){7, 5, -18}, ivory, 4};
+	game.spheres[0] = (t_sphere){(t_p3d){-3, 0, -16}, ivory, 5, (t_p3d){1, 1, 1}};
+	game.spheres[1] = (t_sphere){(t_p3d){-1.0, -1.5, -12}, red_rubber, 2, 5};
+	game.spheres[3] = (t_sphere){(t_p3d){1.5, -0.5, -18}, red_rubber, 3, 5};
+	game.spheres[4] = (t_sphere){(t_p3d){7, 5, -18}, ivory, 4, 5};
 
-	game.spheres[2] = (t_sphere){(t_p3d){-3.0, 0, -12}, red_rubber, 1}; // this is a light source, move with wasdqe
+	game.spheres[2] = (t_sphere){(t_p3d){-3.0, 0, -12}, red_rubber, 1, 5}; // this is a light source, move with wasdqe
 
 	// ft_p3d_print(&game.spheres[0].center);
 	// ft_p3d_print(&game.spheres[1].center);
-- 
2.14.3 (Apple Git-98)

